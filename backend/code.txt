// Base URL of the backend
const baseUrl = "http://localhost:8080/api/expenses";

// Handle form submission to add a new expense
document.getElementById('expenseForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const description = document.getElementById('description').value;
    const amount = document.getElementById('amount').value;
    const category = document.getElementById('category').value;
    const date = document.getElementById('date').value;

    const expense = { description, amount, category, date };

    try {
        const response = await fetch(baseUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(expense),
        });
        const data = await response.json();
        alert('Expense added successfully!');
        console.log(data);
        fetchExpenses(); // Reload expenses
    } catch (error) {
        console.error('Error adding expense:', error);
    }
});

// Fetch and display all expenses v.3
async function fetchExpenses() {
    try {
        const response = await fetch(baseUrl);
        const expenses = await response.json();
        const expenseList = document.getElementById('expenseList');
        expenseList.innerHTML = ''; // Clear current list

        expenses.forEach((expense) => {
            const li = document.createElement('li');
            li.textContent = `${expense.description} - â‚¹${expense.amount} - ${expense.category} - ${expense.date}`;

            // Add delete button for each expense
            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = 'Delete';
            deleteBtn.onclick = () => deleteExpense(expense.id);  // Pass expense ID to the delete function
            li.appendChild(deleteBtn); // Append delete button to the expense item

            // Add "Edit" button
            const editBtn = document.createElement('button');
            editBtn.textContent = 'Edit';
            editBtn.onclick = () => editExpense(expense); // Attach edit event
            li.appendChild(editBtn);

            expenseList.appendChild(li); // Add the expense item to the list
        });
    } catch (error) {
        console.error('Error fetching expenses:', error);
    }
}

async function deleteExpense(expenseId) {
    try {
        const response = await fetch(`${baseUrl}/${expenseId}`, {
            method: 'DELETE',
        });
        if (response.ok) {
            alert('Expense deleted successfully!');
            fetchExpenses(); // Reload expenses after deletion
        } else {
            alert('Error deleting expense');
        }
    } catch (error) {
        console.error('Error deleting expense:', error);
    }
}
// Edit an expense (for future implementation)
function editExpense(expense) {
    // Pre-fill the form with existing expense data
    document.getElementById('description').value = expense.description;
    document.getElementById('amount').value = expense.amount;
    document.getElementById('category').value = expense.category;
    document.getElementById('date').value = expense.date;

    // Add an "Update Expense" button dynamically
    const updateButton = document.createElement('button');
    updateButton.textContent = 'Update Expense';
    updateButton.onclick = async (e) => {
        e.preventDefault();
        const updatedExpense = {
            description: document.getElementById('description').value,
            amount: document.getElementById('amount').value,
            category: document.getElementById('category').value,
            date: document.getElementById('date').value,
        };

        try {
            await apiRequest(`${baseUrl}/${expense.id}`, 'PUT', updatedExpense);
            alert('Expense updated successfully!');
            fetchExpenses(); // Reload expenses
        } catch (error) {
            console.error('Error updating expense:', error);
        }

        // Remove the update button after updating
        updateButton.remove();
    };

    // Append the "Update Expense" button to the form if it doesn't already exist
    const form = document.getElementById('expenseForm');
    if (!form.contains(updateButton)) form.appendChild(updateButton);
}

//code for somthing scrolling
document.querySelectorAll('.nav-links a').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();

        // Scroll smoothly to the target section
        const targetId = this.getAttribute('href').substring(1);
        document.getElementById(targetId).scrollIntoView({
            behavior: 'smooth'
        });

        // Activate the corresponding section and hide others
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(targetId).classList.add('active');
    });
});

// JavaScript to handle smooth scrolling
const addExpenseBtn = document.getElementById('addExpenseBtn');
const addExpenseSection = document.getElementById('addExpenseSection');

addExpenseBtn.addEventListener('click', () => {
    addExpenseSection.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const categoryChips = document.querySelectorAll('.category-chip');
    let selectedCategory = null;

    categoryChips.forEach((chip) => {
        chip.addEventListener('click', () => {
            // Remove the selected class from all chips
            categoryChips.forEach((chip) => chip.classList.remove('selected'));

            // Add the selected class to the clicked chip
            chip.classList.add('selected');
            selectedCategory = chip.textContent; // Store the selected category

            console.log(`Selected category: ${selectedCategory}`);
        });
    });
});